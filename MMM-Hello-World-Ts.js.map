{"version":3,"file":"MMM-Hello-World-Ts.js","sources":["src/constants/SocketNotifications.ts","src/frontend/Frontend.ts"],"sourcesContent":["export var SocketNotification;\n(function (SocketNotification) {\n    SocketNotification[\"GREETINGS_TEXT_REQUEST\"] = \"GREETINGS_TEXT_REQUEST\";\n    SocketNotification[\"GREETINGS_TEXT_RESPONSE\"] = \"GREETINGS_TEXT_RESPONSE\";\n})(SocketNotification || (SocketNotification = {}));\n//# sourceMappingURL=SocketNotifications.js.map","import * as Log from 'logger';\nimport { SocketNotification } from '../constants/SocketNotifications';\nModule.register('MMM-Hello-World-Ts', {\n    // Default module config\n    defaults: {\n        text: 'Hello World!',\n    },\n    // MM function: this method is called when all modules are loaded and the system is ready to boot up.\n    start() {\n        Log.debug(`${this.name} is starting`);\n        this.loadData();\n        this.scheduleUpdate();\n        this.updateDom();\n    },\n    /**\n     * The getStyles method is called to request any additional stylesheets that need to be loaded.\n     * This method should therefore return an array with strings. If you want to return a full path\n     * to a file in the module folder, use the this.file('filename.css') method. In all cases the\n     * loader will only load a file once. It even checks if the file is available in the default\n     * vendor folder.\n     */\n    getStyles() {\n        return [this.file('css/MMM-Hello-World-Ts.css')];\n    },\n    // MM function: loads template\n    getTemplate() {\n        return 'templates/MMM-Hello-World-Ts.njk';\n    },\n    // MM function: returns template data\n    getTemplateData() {\n        return {\n            text: this.state?.text,\n            lastUpdated: new Date(this.state?.lastUpdated).toLocaleString(),\n        };\n    },\n    // MM function: receives socket notifications from node helper\n    socketNotificationReceived(notificationIdentifier, payload) {\n        if (notificationIdentifier === SocketNotification.GREETINGS_TEXT_RESPONSE) {\n            Log.debug(`${this.name} received a socket notification: '${notificationIdentifier}' with payload: ${JSON.stringify(payload)}`);\n            this.state = payload;\n            this.updateDom();\n        }\n        else {\n            Log.error(`${this.name} received unknown socket notification: '${notificationIdentifier}'`);\n        }\n    },\n    // Custom function: load data every 10 seconds\n    scheduleUpdate() {\n        setInterval(() => {\n            this.loadData();\n        }, 10000); // 10 seconds\n    },\n    // Custom function: send socker notification to node helper with config from user\n    loadData() {\n        Log.debug(`${this.name} is loading data`);\n        this.sendSocketNotification('GREETINGS_TEXT_REQUEST', this.config);\n    },\n});\n//# sourceMappingURL=Frontend.js.map"],"names":["SocketNotification","Module","register","defaults","text","start","Log","debug","this","name","loadData","scheduleUpdate","updateDom","getStyles","file","getTemplate","getTemplateData","state","lastUpdated","Date","toLocaleString","socketNotificationReceived","notificationIdentifier","payload","GREETINGS_TEXT_RESPONSE","JSON","stringify","error","setInterval","sendSocketNotification","config"],"mappings":";;;;;;;;;;;;wfAAWA,UACX,SAAWA,GACPA,EAA2C,uBAAI,yBAC/CA,EAA4C,wBAAI,yBACnD,CAHD,CAGGA,IAAuBA,EAAqB,CAAA,ICF/CC,OAAOC,SAAS,qBAAsB,CAElCC,SAAU,CACNC,KAAM,gBAGVC,QACIC,EAAIC,MAAM,GAAGC,KAAKC,oBAClBD,KAAKE,WACLF,KAAKG,iBACLH,KAAKI,WACR,EAQDC,YACI,MAAO,CAACL,KAAKM,KAAK,8BACrB,EAEDC,YAAW,IACA,mCAGXC,kBACI,MAAO,CACHZ,KAAMI,KAAKS,OAAOb,KAClBc,YAAa,IAAIC,KAAKX,KAAKS,OAAOC,aAAaE,iBAEtD,EAEDC,2BAA2BC,EAAwBC,GAC3CD,IAA2BtB,EAAmBwB,yBAC9ClB,EAAIC,MAAM,GAAGC,KAAKC,yCAAyCa,oBAAyCG,KAAKC,UAAUH,MACnHf,KAAKS,MAAQM,EACbf,KAAKI,aAGLN,EAAIqB,MAAM,GAAGnB,KAAKC,+CAA+Ca,KAExE,EAEDX,iBACIiB,aAAY,KACRpB,KAAKE,UAAU,GAChB,IACN,EAEDA,WACIJ,EAAIC,MAAM,GAAGC,KAAKC,wBAClBD,KAAKqB,uBAAuB,yBAA0BrB,KAAKsB,OAC9D"}